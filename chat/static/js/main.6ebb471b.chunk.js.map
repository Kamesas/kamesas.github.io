{"version":3,"sources":["LiveChat/API/API.js","LiveChat/LiveChat.jsx","App.js","serviceWorker.js","index.js"],"names":["__webpack_require__","d","__webpack_exports__","checkDomain","getDomainApiCreateSession","postVisitorAuthRequest","getAvailability","getAvailableSlots","getPreChatSurvey","postChatRequest","getRetrieveOfflineSUrvey","postOfflineSurvey","getExitSurveyStructure","domain","accountId","headersObj","Authorization","Content-Type","Accept","headers","Object","freeze","postCreateSession","getDomainApi","getRetrieveEtimatedWaitTime","getChatEvents","urls","concat","methods","get","post","patch","put","delete","options","resolve","reject","makeRequest","method","url","body","then","r","e","res","parseResponse","JSON","parse","data","baseURI","account","console","log","params","Promise","xhr","XMLHttpRequest","open","keys","forEach","key","setRequestHeader","onload","status","response","getAllResponseHeaders","trim","split","onerror","statusText","send","reqBody","pages","loginForm","formOffline","chatList","confirm","feedBack","Pages","LoginForm","React","lazy","bind","FormOffline","ChatList","Confirm","Sidecar","Feedback","forCreateSession","appType","appDetails","os","osVersion","appVersion","deviceFamily","ipAddress","consumerSections","engagementAttributes","type","personal","contacts","email","phone","age","year","month","day","firstname","lastname","gender","company","LiveChat","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getAvailabilityAndSlots","respons","availability","availableSlots","setState","isAvailability","chatRequest","respSurvey","preChatSurvey","minimazeChat","isOpenWindowChat","SidecarWindow","openChatWindow","closeChatWindow","currentWindow","state","showFormOffline","closeConfirm","toggleSidecarWindow","showChatList","closeChatList","onChatMouseDown","preventDefault","chatElem","document","getElementById","addEventListener","onChatMouseMove","onchatMouseUp","startStateX","parseInt","style","right","startPosX","pageX","widthScreen","removeEventListener","onchatMouseLeave","interval","clientWidth","isAgentOnline","_this2","fetch","stringify","setInterval","clearInterval","windowName","react_default","a","createElement","showChat","cancel","showSidecarWindow","closeChat","_this$state","react","fallback","className","id","hideSidecarWindow","onMouseDown","onClick","renderCurrentWindow","Component","App","src_LiveChat_LiveChat","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6ebb471b.chunk.js","sourcesContent":["// AppKey: 721c180b09eb463d9f3191c41762bb68\n// lpNumber: 58135133\n\nlet domain = null;\nlet accountId = null;\nlet chatId = \"CHAT_ID\"; //\"CHAT_ID\";\n\nconst headersObj = {\n  Authorization: \"LivePerson appKey=721c180b09eb463d9f3191c41762bb68\",\n  \"Content-Type\": \"application/json\",\n  Accept: \"application/json\"\n};\n\nconst headers = Object.freeze({\n  getDomainApiCreateSession: headersObj,\n  postCreateSession: headersObj,\n\n  getDomainApi: headersObj,\n  postChatRequest: headersObj,\n  postVisitorAuthRequest: headersObj,\n\n  getAvailability: headersObj,\n  getAvailableSlots: headersObj,\n  getRetrieveEtimatedWaitTime: headersObj,\n\n  getPreChatSurvey: headersObj,\n\n  getRetrieveOfflineSUrvey: headersObj,\n  postOfflineSurvey: headersObj,\n\n  getChatEvents: headersObj,\n  getExitSurveyStructure: headersObj\n});\n\nconst urls = Object.freeze({\n  getDomainApiCreateSession: `http://api.liveperson.net/api/account/58135133/service/msdkgw/baseURI.json?version=1.0`,\n  get postCreateSession() {\n    //return `https://va.v.liveperson.net/api/account/${accountId}/app/engagement/visitors`;\n    //return `https://va.v.liveperson.net/api/account/58135133/app/engagement/visitors/?v=1.0`;\n    return `https://va.v.liveperson.net/api/account/58135133/app/engagement/visitors/?v=1.0`;\n  },\n\n  getDomainApi: `http://api.liveperson.net/api/account/58135133/service/conversationVep/baseURI.json?version=1.0`,\n  get postChatRequest() {\n    return `https://${domain}/api/account/${accountId}/chat/request?v=1&NC=true`;\n  },\n  get postVisitorAuthRequest() {\n    return `https://${domain}/api/account/${accountId}/conversation.json?v=1&NC=true`;\n  },\n\n  get getAvailability() {\n    return `https://${domain}/api/account/${accountId}/chat/availability?v=1&NC=true`;\n  },\n  get getAvailableSlots() {\n    return `https://${domain}/api/account/${accountId}/chat/availableSlots?v=1&NC=true`;\n  },\n  get getRetrieveEtimatedWaitTime() {\n    return `https://${domain}/api/account/${accountId}/chat/estimatedWaitTime?v=1&NC=true`;\n  },\n\n  get getPreChatSurvey() {\n    return `https://${domain}/api/account/${accountId}/chat//preSurvey?v=1&NC=true`;\n  },\n\n  get getRetrieveOfflineSUrvey() {\n    return `https://${domain}/api/account/${accountId}/chat/offlineSurvey?v=1&NC=true`;\n  },\n  get postOfflineSurvey() {\n    return `https://${domain}/api/account/${accountId}/chat/offlineSurvey?v=1&NC=true`;\n  },\n\n  get getChatEvents() {\n    return `https://${domain}/api/account/${accountId}/chat/${chatId}/events?v=1&NC=true`;\n  },\n  get getExitSurveyStructure() {\n    return `https://${domain}/api/account/${accountId}/chat/${chatId}/exitSurvey?v=1&NC=true`;\n  }\n});\n\nconst methods = Object.freeze({\n  get: \"GET\",\n  post: \"POST\",\n  patch: \"PATCH\",\n  put: \"PUT\",\n  delete: \"DELETE\",\n  options: \"OPTIONS\"\n});\n\nexport const checkDomain = (resolve, reject) => {\n  if (!!domain) resolve(domain);\n\n  getDomainApi().then(res => {\n    const parseResponse = JSON.parse(res.data);\n    domain = parseResponse.baseURI;\n    accountId = parseResponse.account;\n    console.log(\"getDomainApi ---> \", res);\n    resolve(domain);\n  });\n};\n\n/**\n * Creating adapter and configuring it\n */\nfunction makeRequest(params) {\n  return new Promise(function(resolve, reject) {\n    let xhr = new XMLHttpRequest();\n    xhr.open(params.method || \"GET\", params.url);\n\n    if (params.headers) {\n      Object.keys(params.headers).forEach(key => {\n        xhr.setRequestHeader(key, params.headers[key]);\n      });\n    }\n\n    xhr.onload = () => {\n      if (xhr.status >= 200 && xhr.status < 300) {\n        // console.log(xhr);\n        // console.log(xhr.getResponseHeader(\"Location\"));\n        resolve({\n          data: xhr.response,\n          headers: xhr\n            .getAllResponseHeaders()\n            .trim()\n            .split(/[\\r\\n]+/)\n        });\n      } else {\n        reject({\n          data: xhr.response,\n          headers: xhr\n            .getAllResponseHeaders()\n            .trim()\n            .split(/[\\r\\n]+/)\n        });\n      }\n    };\n\n    xhr.onerror = () => reject(xhr.statusText);\n    xhr.send(params.body);\n  });\n}\n\n/**\n * The GET method used returns the base URI for the specified account ID and serviceName.\n * {\"service\":\"conversationVep\",\"account\":\"58135133\",\"baseURI\":\"va-e.convep.liveperson.net\"}\n */\nfunction getDomainApi() {\n  const params = {\n    method: methods.get,\n    url: urls.getDomainApi,\n    headers: headers.getDomainApi,\n    body: {}\n  };\n  return makeRequest(params).then(r => r, e => e);\n}\n\n/**\n * Create Session\n * Use this method to start a new session and to get an engagement according to the SDEs provided.\n * returned ===> {data: \"{\"service\":\"msdkgw\",\"account\":\"58135133\",\"baseURI\":\"va.v.liveperson.net\"}\", headers: Array(1)}\n */\nexport const getDomainApiCreateSession = () => {\n  const params = {\n    method: methods.get,\n    url: urls.getDomainApiCreateSession,\n    headers: headers.getDomainApiCreateSession,\n    body: {}\n  };\n  return makeRequest(params).then(r => r, e => e);\n};\n\n/**\n * Use this method to start a new session and to get an engagement according to the SDEs provided.\n */\nexport const postCreateSession = reqBody => {\n  const params = {\n    method: methods.post,\n    url: urls.postCreateSession,\n    headers: headers.postCreateSession,\n    body: reqBody\n  };\n  return makeRequest(params);\n};\n\n/**\n * Visitor Authentication Request\n * @param {*} reqBody\n */\nexport const postVisitorAuthRequest = reqBody => {\n  const params = {\n    method: methods.post,\n    url: urls.postVisitorAuthRequest,\n    headers: headers.postVisitorAuthRequest,\n    body: reqBody\n  };\n  return makeRequest(params).then(r => r, e => e);\n};\n\n/**\n * Retrieve Estimated Wait Time\n * Returns the estimated wait time in seconds before a chat starts.\n */\nexport const getRetrieveEtimatedWaitTime = () => {\n  const params = {\n    method: methods.get,\n    url: urls.getRetrieveEtimatedWaitTime,\n    headers: headers.getRetrieveEtimatedWaitTime,\n    body: {}\n  };\n  return makeRequest(params).then(r => r, e => e);\n};\n\n/**\n * Check for support agent availability\n * @params none\n * @returns {bool} true if available, false in opposite\n */\nexport const getAvailability = () => {\n  const params = {\n    method: methods.get,\n    url: urls.getAvailability,\n    headers: headers.getAvailability,\n    body: {}\n  };\n  return makeRequest(params).then(r => r, e => e);\n};\n\n/**\n * Check for support agent availability slots\n * @params none\n * @returns number\n */\nexport const getAvailableSlots = () => {\n  const params = {\n    method: methods.get,\n    url: urls.getAvailableSlots,\n    headers: headers.getAvailableSlots,\n    body: {}\n  };\n  return makeRequest(params).then(r => r, e => e);\n};\n\n/**\n * Retrieves prechat survey form data\n * @returns promise\n * survey: {id: 232824, title: \"\", header: \"Thank you for contacting us. ↵<br> Please complete… size=\"2\">* indicates required field</font>↵↵<br>\", questions: {…}}\n */\nexport const getPreChatSurvey = () => {\n  const params = {\n    method: methods.get,\n    url: urls.getPreChatSurvey,\n    headers: headers.getPreChatSurvey,\n    body: {}\n  };\n  return makeRequest(params).then(r => r, e => e);\n};\n\n/**\n * Chat Request\n * @param {*} reqBody\n * returned ---> Location: https://va-e.convep.liveperson.net/api/account/58135133/chat/H1243658520860036083-bbdd409c37b04c68988d52d6fd72baa9K8476020\n */\nexport const postChatRequest = reqBody => {\n  const params = {\n    method: methods.post,\n    url: urls.postChatRequest,\n    headers: headers.postChatRequest,\n    body: reqBody\n  };\n  return makeRequest(params);\n};\n\n/**\n * Retrieve Offline Survey\n * Returns an XML or JSON response with an Offline survey, or posts an Offline survey.\n * @param {*} reqBody\n */\nexport const getRetrieveOfflineSUrvey = () => {\n  const params = {\n    method: methods.get,\n    url: urls.getRetrieveOfflineSUrvey,\n    headers: headers.getRetrieveOfflineSUrvey,\n    body: {}\n  };\n  return makeRequest(params).then(r => r, e => e);\n};\n\n/**\n * Post Offline Survey\n * @param {*} reqBody\n */\nexport const postOfflineSurvey = reqBody => {\n  const params = {\n    method: methods.post,\n    url: urls.postChatRequest,\n    headers: headers.postChatRequest,\n    body: reqBody\n  };\n  return makeRequest(params);\n};\n\n/**\n * Retrieve Chat Events\n *This method retrieves the chat events.\n */\nexport const getChatEvents = () => {\n  const params = {\n    method: methods.get,\n    url: urls.getChatEvents,\n    headers: headers.getChatEvents,\n    body: {}\n  };\n  return makeRequest(params).then(r => r, e => e);\n};\n\n/**\n * Retrieve Exit Survey Structure\n */\nexport const getExitSurveyStructure = () => {\n  const params = {\n    method: methods.get,\n    url: urls.getExitSurveyStructure,\n    headers: headers.getExitSurveyStructure,\n    body: {}\n  };\n  return makeRequest(params).then(r => r, e => e);\n};\n","import React, { Component, Suspense } from \"react\";\nimport \"./LiveChat.sass\";\nimport {\n  getPreChatSurvey,\n  getAvailability,\n  getAvailableSlots,\n  checkDomain,\n  getDomainApiCreateSession,\n  postCreateSession\n} from \"./API/API\";\n\n/**\n * Plugin Pages names\n */\nconst pages = Object.freeze({\n  // rename pages\n  loginForm: \"LoginForm\",\n  formOffline: \"FormOffline\",\n  chatList: \"ChatList\",\n  confirm: \"Confirm\",\n  feedBack: \"FeedBack\"\n});\n\n/**\n * List of plugin pages\n */\nconst Pages = {\n  LoginForm: React.lazy(() => import(\"./LoginForm/LoginForm\")),\n  FormOffline: React.lazy(() => import(\"./FormOffline/FormOffline\")),\n  ChatList: React.lazy(() => import(\"./ChatList\")),\n  Confirm: React.lazy(() => import(\"./Confirm/Confirm\")),\n  Sidecar: React.lazy(() => import(\"./Sidecar/Sidecar\")),\n  Feedback: React.lazy(() => import(\"./Feedback/Feedback\"))\n};\n\nconst forCreateSession = {\n  appType: \"EXTERNAL\",\n  appDetails: {\n    os: \"MAC_OSX\",\n    osVersion: \"1.2\",\n    appVersion: \"1.0\",\n    deviceFamily: \"MOBILE\",\n    ipAddress: \"192.168.5.2\"\n  },\n  consumerSections: [\"Support\", \"English\", \"other\"],\n  engagementAttributes: [\n    {\n      type: \"personal\",\n      personal: {\n        contacts: [\n          { email: \"test.com\", phone: \"12345678\" },\n          { email: \"test2.co.il\", phone: \"98765430\" }\n        ],\n        age: {\n          age: 30.0,\n          year: 1985,\n          month: 7,\n          day: 22\n        },\n        firstname: \"test\",\n        lastname: \"test2\",\n        gender: \"FEMALE\",\n        company: \"liveperson\"\n      }\n    }\n  ]\n};\n\n/**\n * Live chat parent component\n */\nclass LiveChat extends Component {\n  constructor(props) {\n    super(props);\n\n    this.interval = null; //interval for this.getAvailable()\n\n    this.chatElem = null; //chat window\n    this.startPosX = 0; // start position  chat window\n    this.startStateX = 0; //start move mouse\n    this.widthScreen = document.body.clientWidth; // width screen (need for window of chat)\n\n    this.state = {\n      isOpenWindowChat: false, // Flag to show / hide window\n      currentWindow: pages.loginForm, // Indicates current showing window\n      SidecarWindow: false, // sidecar window show / hide\n      isAgentOnline: true, // support agent status (need for Offlline Form)\n      isAvailability: false, // support agent status\n      availableSlots: 0, // available slots to connect visitor\n      preChatSurvey: null // Retrieve Pre-Chat Survey\n    };\n  }\n\n  componentDidMount() {\n    getDomainApiCreateSession()\n      .then(r => {\n        console.log(\"getDomainApiCreateSession ---> \", r);\n        return JSON.parse(r.data);\n      })\n      .then(r => {\n        const domain = r.baseURI;\n        const accountId = r.account;\n\n        fetch(\n          //\"https://va.v.liveperson.net/api/account/58135133/app/engagement/visitors/?v=1.0\",\n          `https://${domain}/api/account/${accountId}/app/engagement/visitors/?v=1.0`,\n          {\n            method: \"post\",\n            headers: {\n              Authorization:\n                \"LivePerson appKey=721c180b09eb463d9f3191c41762bb68\",\n              \"Content-Type\": \"application/json\",\n              Accept: \"application/json\"\n            },\n            body: JSON.stringify(forCreateSession)\n          }\n        ).then(res => {\n          console.log(\"postCreateSession ---> \", res);\n        });\n      });\n\n    // console.log(\"forCreateSession ---> \", forCreateSession);\n    // postCreateSession(JSON.stringify(forCreateSession)).then(r => {\n    //   console.log(\"postCreateSession\", r);\n    // });\n\n    if (!this.state.isAvailability && this.state.availableSlots < 1) {\n      if (!this.interval) {\n        this.interval = setInterval(() => {\n          this.getAvailabilityAndSlots() && clearInterval(this.interval);\n        }, 3000); // @todo change to 10 sec for production to reduce page load\n      }\n    }\n  }\n\n  /**\n   * Check for support agent availability\n   * @params none\n   * @returns {bool} true if available, false in opposite\n   */\n  getAvailabilityAndSlots = () => {\n    return new Promise(checkDomain).then(r => {\n      getAvailability()\n        .then(respons => {\n          //console.log(\"getAvailability ---> \", respons);\n          const { availability } = JSON.parse(respons.data);\n          return availability;\n        })\n        .then(availability => {\n          return getAvailableSlots().then(respons => {\n            console.log(\"getAvailableSlots ---> \", respons);\n\n            const { availableSlots } = JSON.parse(respons.data);\n            this.setState({\n              isAvailability: availability ? availability : false,\n              availableSlots: availableSlots ? availableSlots : 0\n            });\n          });\n        });\n    });\n  };\n\n  chatRequest = () => {\n    getPreChatSurvey().then(respons => {\n      const respSurvey = JSON.parse(respons.data);\n      //console.log(\"getPreChatSurvey --->\", respSurvey);\n      this.setState({ preChatSurvey: respSurvey });\n    });\n  };\n\n  /**\n   * window switching (open, close and minimaze)\n   */\n  minimazeChat = () => {\n    this.setState({ isOpenWindowChat: false, SidecarWindow: false });\n  };\n\n  openChatWindow = () => {\n    this.setState({ isOpenWindowChat: true });\n    this.chatRequest();\n  };\n\n  closeChatWindow = () => {\n    const { currentWindow } = this.state;\n    if (currentWindow === pages.chatList) {\n      this.setState({ currentWindow: pages.confirm });\n      return;\n    }\n    if (\n      currentWindow === pages.feedBack ||\n      currentWindow === pages.formOffline\n    ) {\n      this.setState({\n        currentWindow: pages.loginForm,\n        isOpenWindowChat: false\n      });\n      return;\n    }\n\n    this.setState({ isOpenWindowChat: false });\n  };\n\n  showFormOffline = () => {\n    this.setState({ currentWindow: pages.formOffline });\n  };\n\n  closeConfirm = () => {\n    this.setState({ currentWindow: pages.chatList });\n  };\n\n  toggleSidecarWindow = () => {\n    this.setState({ SidecarWindow: !this.state.SidecarWindow });\n  };\n\n  showChatList = () => {\n    this.setState({ currentWindow: pages.chatList });\n  };\n  closeChatList = () => {\n    this.setState({\n      currentWindow: pages.feedBack,\n      SidecarWindow: false\n    });\n  };\n\n  renderCurrentWindow(windowName) {\n    switch (windowName) {\n      case pages.loginForm:\n        return this.state.preChatSurvey ? (\n          <Pages.LoginForm\n            showChat={this.showChatList}\n            cancel={this.closeChatWindow}\n            isAgentOnline={this.state.isAgentOnline}\n            preChatSurvey={this.state.preChatSurvey}\n            showFormOffline={this.showFormOffline}\n          />\n        ) : (\n          \"loading\"\n        );\n      case pages.formOffline:\n        return <Pages.FormOffline closeChatWindow={this.closeChatWindow} />;\n      case pages.chatList:\n        return <Pages.ChatList showSidecarWindow={this.toggleSidecarWindow} />;\n      case pages.confirm:\n        return (\n          <Pages.Confirm\n            closeChat={this.closeChatList}\n            closeConfirm={this.closeConfirm}\n          />\n        );\n      case pages.feedBack:\n        return <Pages.Feedback closeChatWindow={this.closeChatWindow} />;\n      default:\n        return null;\n    }\n  }\n\n  render() {\n    const {\n      isOpenWindowChat,\n      currentWindow,\n      SidecarWindow\n      //isAvailability,\n      //availableSlots\n    } = this.state;\n\n    return (\n      <Suspense fallback=\"\">\n        <div className=\"chat\" id=\"chat\">\n          {SidecarWindow && (\n            <Pages.Sidecar hideSidecarWindow={this.toggleSidecarWindow} />\n          )}\n          {isOpenWindowChat && (\n            <div className=\"chat__window\">\n              <div className=\"chat__header\" onMouseDown={this.onChatMouseDown}>\n                <span className=\"title\" />\n                <button\n                  className=\"buttonMinimaze\"\n                  onClick={this.minimazeChat}\n                />\n                <button\n                  className=\"buttonClose\"\n                  onClick={this.closeChatWindow}\n                />\n              </div>\n\n              <div className=\"chat__body\">\n                {this.renderCurrentWindow(currentWindow)}\n              </div>\n            </div>\n          )}\n        </div>\n        {!isOpenWindowChat && (\n          <div className=\"buttonShowChat__wrapper\">\n            <button\n              onClick={this.openChatWindow}\n              className=\"button buttonShowChat\"\n            />\n          </div>\n        )}\n        {/*  {!isOpenWindowChat && isAvailability && availableSlots !== 0 && (\n          <div className=\"buttonShowChat__wrapper\">\n            <button\n              onClick={this.openChatWindow}\n              className=\"button buttonShowChat\"\n            />\n          </div>\n        )} */}\n      </Suspense>\n    );\n  }\n\n  /**\n   * Move chat window\n   */\n\n  onChatMouseDown = e => {\n    e.preventDefault();\n\n    if (!this.chatElem) {\n      this.chatElem = document.getElementById(\"chat\");\n    }\n    document.addEventListener(\"mousemove\", this.onChatMouseMove, true);\n    document.addEventListener(\"mouseup\", this.onchatMouseUp, true);\n\n    this.startStateX = parseInt(this.chatElem.style.right) || 0;\n    this.startPosX = e.pageX;\n  };\n\n  onChatMouseMove = e => {\n    if (this.chatElem) {\n      if (this.startStateX + (this.startPosX - e.pageX) < 0) {\n        this.chatElem.style.right = 0;\n        return;\n      }\n\n      if (\n        this.startStateX + (this.startPosX - e.pageX) >\n        this.widthScreen - 320\n      ) {\n        this.chatElem.style.right = this.widthScreen - 320;\n        return;\n      }\n\n      this.chatElem.style.right =\n        this.startStateX + (this.startPosX - e.pageX) + \"px\";\n    }\n  };\n\n  onchatMouseUp = e => {\n    document.removeEventListener(\"mousemove\", this.onChatMouseMove, true);\n    document.removeEventListener(\"mouseup\", this.onchatMouseUp, true);\n  };\n\n  onchatMouseLeave = e => {\n    this.onchatMouseUp(e);\n  };\n}\n\nexport default LiveChat;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport LiveChat from \"./LiveChat/LiveChat\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <LiveChat />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
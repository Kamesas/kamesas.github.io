{"version":3,"sources":["LiveChat/API/dataFromApi.js","LiveChat/ChatList/ChatList.jsx","LiveChat/ChatList/index.js"],"names":["__webpack_require__","d","__webpack_exports__","dataFromEtrieveChatEvents","retrieveExitSurveyStructure","events","link","@href","@rel","event","@id","@type","time","state","textType","text","by","source","systemMessageId","subType","survey","id","title","header","questions","question","type","validationType","logicId","order","mandatory","label","entry","checked","value","displayValue","lastKnownValue","ChatList","isPanel","message","togglePanel","_this","setState","onChangeHandler","e","target","sendNewMessage","newState","newMessage","Date","now","toDateString","push","renderDialog","map","item","classesLI","classesTime","react_default","a","createElement","className","key","dangerouslySetInnerHTML","__html","_this2","this","onClick","props","showSidecarWindow","concat","placeholder","onChange","onKeyDown","name","console","log","htmlFor","Component"],"mappings":"yFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,IAAO,IAAMD,EAA4B,CACvCE,OAAQ,CACNC,KAAM,CACJ,CACEC,QACE,gEACFC,OAAQ,QAEV,CACED,QACE,uEACFC,OAAQ,SAGZC,MAAO,CACL,CACEC,MAAO,IACPC,QAAS,QACTC,KAAM,gCACNC,MAAO,WAET,CACEH,MAAO,IACPC,QAAS,OACTC,KAAM,gCACNE,SAAU,QACVC,KAAM,0CACNC,GAAI,OACJC,OAAQ,SACRC,gBAAiB,IACjBC,QAAS,WAEX,CACET,MAAO,IACPC,QAAS,QACTC,KAAM,gCACNC,MAAO,YAET,CACEH,MAAO,IACPC,QAAS,OACTC,KAAM,gCACNE,SAAU,QACVC,KAAM,qCACNC,GAAI,OACJC,OAAQ,SACRC,gBAAiB,IACjBC,QAAS,WAEX,CACET,MAAO,IACPC,QAAS,OACTC,KAAM,gCACNE,SAAU,OACVC,KACE,oEACFC,GAAI,UACJC,OAAQ,QACRE,QAAS,cAMJf,EAA8B,CACzCgB,OAAQ,CACNC,GAAI,OACJC,MAAO,GACPC,OAAQ,GACRC,UAAW,CACTC,SAAU,CACR,CACEC,KAAM,eACNC,eAAgB,gBAChBN,GAAI,QACJO,QAAS,EACTC,MAAO,EACPC,WAAW,EACXC,MAAO,4DACPC,MAAO,CACL,CACEC,SAAS,EACTC,MAAO,MACPC,aAAc,OAEhB,CACEF,SAAS,EACTC,MAAO,KACPC,aAAc,QAIpB,CACET,KAAM,aACNC,eAAgB,QAChBN,GAAI,QACJO,QAAS,EACTC,MAAO,EACPC,WAAW,EACXC,MAAO,qCACPK,eAAgB,4IC0CXC,6MAxIbxB,MAAQ,CACNyB,SAAS,EACTC,QAAS,GACTpC,iCAOFqC,YAAc,kBAAMC,EAAKC,SAAS,CAAEJ,SAAUG,EAAK5B,MAAMyB,aAEzDK,gBAAkB,SAAAC,GAChBH,EAAKC,SAAS,CAAEH,QAASK,EAAEC,OAAOX,WAGpCY,eAAiB,SAAAF,GACf,IAAIG,EAAWN,EAAK5B,MAAMV,0BAEpB6C,EAAa,CACjBtC,MAAOuC,KAAKC,MACZvC,QAAS,OACTK,GAAI,UACJC,OAAQ,UACRE,QAAS,UACTJ,KAAM0B,EAAK5B,MAAM0B,QACjBzB,SAAU,QACVF,MAAM,IAAIqC,MAAOE,gBAGnBJ,EAAS1C,OAAOI,MAAM2C,KAAKJ,GAE3BP,EAAKC,SAAS,iBAAO,CACnBvC,0BAA2B4C,EAC3BR,QAAS,SAIbc,aAAe,SAAAhD,GAGb,OAFkBA,EAAVI,MAEK6C,IAAI,SAAAC,GACf,IAAIC,EAAY,GACZC,EAAc,GAelB,MAboB,UAAhBF,EAAKtC,SACPuC,EAAY,kBACZC,EAAc,yBAEI,WAAhBF,EAAKtC,SACPuC,EAAY,gBACZC,EAAc,uBAEI,YAAhBF,EAAKtC,SACPuC,EAAY,eACZC,EAAc,sBAII,SAAlBF,EAAK,UACHG,EAAAC,EAAAC,cAAA,MAAIC,UAAWL,EAAWM,IAAKP,EAAK,QAClCG,EAAAC,EAAAC,cAAA,QAAMC,UAAWJ,GAAjB,WAAuCF,EAAK3C,KAA5C,MACA8C,EAAAC,EAAAC,cAAA,QAAMG,wBAAyB,CAAEC,OAAQT,EAAKxC,oFAO/C,IAAAkD,EAAAC,KACP,IAAKA,KAAKrD,MAAMV,0BACd,MAAO,UAFF,IAKCE,EAAW6D,KAAKrD,MAAMV,0BAAtBE,OAER,OACEqD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UACXK,KAAKb,aAAahD,GAAS,IAC5BqD,EAAAC,EAAAC,cAAA,MAAIC,UAAU,iBACZH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,uBAAhB,uBACAH,EAAAC,EAAAC,cAAA,QACEC,UAAU,cACVM,QAASD,KAAKE,MAAMC,mBAFtB,uBAFF,qDAYFX,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,UACEC,UAAS,oBAAAS,OAAsBJ,KAAKrD,MAAMyB,SACxC,qBACF6B,QAASD,KAAK1B,cAEhBkB,EAAAC,EAAAC,cAAA,SACEC,UAAU,gBACVnC,KAAK,OACL6C,YAAY,kBACZrC,MAAOgC,KAAKrD,MAAM0B,QAClBiC,SAAUN,KAAKvB,gBACf8B,UAAW,SAAA7B,GAAC,MAAc,UAAVA,EAAEkB,KAAmBG,EAAKnB,oBAE5CY,EAAAC,EAAAC,cAAA,UAAQO,QAASD,KAAKpB,eAAgBe,UAAU,uBAEjDK,KAAKrD,MAAMyB,SACVoB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,UACEO,QAASD,KAAK1B,YACdqB,UAAU,2BAFZ,OAIMH,EAAAC,EAAAC,cAAA,WAJN,iBAMAF,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WACdH,EAAAC,EAAAC,cAAA,SACElC,KAAK,OACLgD,KAAK,OACLrD,GAAG,OACHa,MAAM,GACNsC,SAAU,SAAA5B,GAAC,OAAI+B,QAAQC,IAAIhC,IAC3BiB,UAAU,mBAEZH,EAAAC,EAAAC,cAAA,SAAOiB,QAAQ,OAAOhB,UAAU,kBAAhC,eA9HSiB,aCJRzC","file":"static/js/6.2994eec0.chunk.js","sourcesContent":["export const dataFromEtrieveChatEvents = {\n  events: {\n    link: [\n      {\n        \"@href\":\n          \"https://{domain}/api/account/{accountId}/chat/{chatId}/events\",\n        \"@rel\": \"self\"\n      },\n      {\n        \"@href\":\n          \"https://{domain}/api/account/{accountId}/chat/{chatId}/events?from=5\",\n        \"@rel\": \"next\"\n      }\n    ],\n    event: [\n      {\n        \"@id\": \"0\",\n        \"@type\": \"state\",\n        time: \"2017-02-27T06:30:00.695-05:00\",\n        state: \"waiting\"\n      },\n      {\n        \"@id\": \"1\",\n        \"@type\": \"line\",\n        time: \"2017-02-27T06:30:00.696-05:00\",\n        textType: \"plain\",\n        text: \"Thank you for choosing to chat with us.\",\n        by: \"info\",\n        source: \"system\",\n        systemMessageId: \"4\",\n        subType: \"REGULAR\"\n      },\n      {\n        \"@id\": \"2\",\n        \"@type\": \"state\",\n        time: \"2017-02-27T06:30:25.502-05:00\",\n        state: \"chatting\"\n      },\n      {\n        \"@id\": \"3\",\n        \"@type\": \"line\",\n        time: \"2017-02-27T06:30:25.502-05:00\",\n        textType: \"plain\",\n        text: \"You are now chatting with Natalie.\",\n        by: \"info\",\n        source: \"system\",\n        systemMessageId: \"3\",\n        subType: \"REGULAR\"\n      },\n      {\n        \"@id\": \"4\",\n        \"@type\": \"line\",\n        time: \"2017-02-27T06:30:31.655-05:00\",\n        textType: \"html\",\n        text:\n          '<div dir=\"ltr\" style=\"direction: ltr; text-align: left;\">hi</div>',\n        by: \"Natalie\",\n        source: \"agent\",\n        subType: \"REGULAR\"\n      }\n    ]\n  }\n};\n\nexport const retrieveExitSurveyStructure = {\n  survey: {\n    id: 361348,\n    title: \"\",\n    header: \"\",\n    questions: {\n      question: [\n        {\n          type: \"Radio Button\",\n          validationType: \"alpha_numeric\",\n          id: 4991315,\n          logicId: 1,\n          order: 0,\n          mandatory: false,\n          label: \"Would you like us to email you a transcript of this chat?\",\n          entry: [\n            {\n              checked: false,\n              value: \"yes\",\n              displayValue: \"Yes\"\n            },\n            {\n              checked: false,\n              value: \"no\",\n              displayValue: \"No\"\n            }\n          ]\n        },\n        {\n          type: \"Text Field\",\n          validationType: \"email\",\n          id: 4991311,\n          logicId: 2,\n          order: 1,\n          mandatory: false,\n          label: \"If yes, please provide your email:\",\n          lastKnownValue: \"\"\n        }\n      ]\n    }\n  }\n};\n","import React, { Component } from \"react\";\nimport \"./ChatList.sass\";\n//import { getChatEvents } from \"../API/API\";\nimport { dataFromEtrieveChatEvents } from \"../API/dataFromApi\";\n\nclass ChatList extends Component {\n  state = {\n    isPanel: false,\n    message: \"\",\n    dataFromEtrieveChatEvents\n  };\n\n  // componentDidMount() {\n  //   getChatEvents().then(r => console.log(\"getChatEvents => \", r));\n  // }\n\n  togglePanel = () => this.setState({ isPanel: !this.state.isPanel });\n\n  onChangeHandler = e => {\n    this.setState({ message: e.target.value });\n  };\n\n  sendNewMessage = e => {\n    let newState = this.state.dataFromEtrieveChatEvents;\n\n    const newMessage = {\n      \"@id\": Date.now(),\n      \"@type\": \"line\",\n      by: \"visitor\",\n      source: \"visitor\",\n      subType: \"REGULAR\",\n      text: this.state.message,\n      textType: \"plain\",\n      time: new Date().toDateString()\n    };\n\n    newState.events.event.push(newMessage);\n\n    this.setState(() => ({\n      dataFromEtrieveChatEvents: newState,\n      message: \"\"\n    }));\n  };\n\n  renderDialog = events => {\n    const { event } = events;\n\n    return event.map(item => {\n      let classesLI = \"\";\n      let classesTime = \"\";\n\n      if (item.source === \"agent\") {\n        classesLI = \"dialog__manager\";\n        classesTime = \"dialog__manager__date\";\n      }\n      if (item.source === \"system\") {\n        classesLI = \"dialog__event\";\n        classesTime = \"dialog__event__date\";\n      }\n      if (item.source === \"visitor\") {\n        classesLI = \"dialog__user\";\n        classesTime = \"dialog__user__date\";\n      }\n\n      return (\n        item[\"@type\"] === \"line\" && (\n          <li className={classesLI} key={item[\"@id\"]}>\n            <span className={classesTime}>Info at {item.time} :</span>\n            <span dangerouslySetInnerHTML={{ __html: item.text }} />\n          </li>\n        )\n      );\n    });\n  };\n\n  render() {\n    if (!this.state.dataFromEtrieveChatEvents) {\n      return \"loading\";\n    }\n\n    const { events } = this.state.dataFromEtrieveChatEvents;\n\n    return (\n      <div className=\"chatList\">\n        <ul className=\"dialog\">\n          {this.renderDialog(events)}{\" \"}\n          <li className=\"dialog__event\">\n            <span className=\"dialog__event__date\">Info at 7:19 Feb 6:</span>\n            <span\n              className=\"sidecarLInk\"\n              onClick={this.props.showSidecarWindow}\n            >\n              Test sideCar window\n            </span>\n            consectetur adipisicing elit. Dolores, sapiente?\n          </li>\n        </ul>\n\n        <div className=\"chatList_footer\">\n          <button\n            className={`button showPanel ${this.state.isPanel &&\n              \"showPanel__showed\"}`}\n            onClick={this.togglePanel}\n          />\n          <input\n            className=\"sendTextInput\"\n            type=\"text\"\n            placeholder=\"Enter text here\"\n            value={this.state.message}\n            onChange={this.onChangeHandler}\n            onKeyDown={e => e.key === \"Enter\" && this.sendNewMessage()}\n          />\n          <button onClick={this.sendNewMessage} className=\"sendMessageButton\" />\n        </div>\n        {this.state.isPanel && (\n          <div className=\"panel\">\n            <button\n              onClick={this.togglePanel}\n              className=\"button buttonClosePanel\"\n            >\n              End <br /> conversation\n            </button>\n            <span className=\"addFile\">\n              <input\n                type=\"file\"\n                name=\"file\"\n                id=\"file\"\n                value=\"\"\n                onChange={e => console.log(e)}\n                className=\"addFile__input\"\n              />\n              <label htmlFor=\"file\" className=\"addFile__label\">\n                +\n              </label>\n            </span>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default ChatList;\n","import ChatList from './ChatList';\nexport default ChatList;"],"sourceRoot":""}